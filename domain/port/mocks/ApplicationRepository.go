// Code generated by MockGen. DO NOT EDIT.
// Source: ./domain/port/ApplicationRepositoryPort.go

// Package mock_port is a generated GoMock package.
package mock_port

import (
	reflect "reflect"

	entities "github.com/RomaneCAVEY/FeatureFlag-Manager/domain/entities"
	gomock "github.com/golang/mock/gomock"
)

// MockApplicationRepositoryPort is a mock of ApplicationRepositoryPort interface.
type MockApplicationRepositoryPort struct {
	ctrl     *gomock.Controller
	recorder *MockApplicationRepositoryPortMockRecorder
}

// MockApplicationRepositoryPortMockRecorder is the mock recorder for MockApplicationRepositoryPort.
type MockApplicationRepositoryPortMockRecorder struct {
	mock *MockApplicationRepositoryPort
}

// NewMockApplicationRepositoryPort creates a new mock instance.
func NewMockApplicationRepositoryPort(ctrl *gomock.Controller) *MockApplicationRepositoryPort {
	mock := &MockApplicationRepositoryPort{ctrl: ctrl}
	mock.recorder = &MockApplicationRepositoryPortMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApplicationRepositoryPort) EXPECT() *MockApplicationRepositoryPortMockRecorder {
	return m.recorder
}

// FindAll mocks base method.
func (m *MockApplicationRepositoryPort) FindAll(arg0, arg1 int) ([]entities.Application, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAll", arg0, arg1)
	ret0, _ := ret[0].([]entities.Application)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindAll indicates an expected call of FindAll.
func (mr *MockApplicationRepositoryPortMockRecorder) FindAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAll", reflect.TypeOf((*MockApplicationRepositoryPort)(nil).FindAll), arg0, arg1)
}

// FindById mocks base method.
func (m *MockApplicationRepositoryPort) FindById(arg0 uint32) (entities.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindById", arg0)
	ret0, _ := ret[0].(entities.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindById indicates an expected call of FindById.
func (mr *MockApplicationRepositoryPortMockRecorder) FindById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindById", reflect.TypeOf((*MockApplicationRepositoryPort)(nil).FindById), arg0)
}

// FindByLabel mocks base method.
func (m *MockApplicationRepositoryPort) FindByLabel(arg0 string) (entities.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLabel", arg0)
	ret0, _ := ret[0].(entities.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLabel indicates an expected call of FindByLabel.
func (mr *MockApplicationRepositoryPortMockRecorder) FindByLabel(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLabel", reflect.TypeOf((*MockApplicationRepositoryPort)(nil).FindByLabel), arg0)
}

// RemoveApplication mocks base method.
func (m *MockApplicationRepositoryPort) RemoveApplication(arg0 uint32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveApplication", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveApplication indicates an expected call of RemoveApplication.
func (mr *MockApplicationRepositoryPortMockRecorder) RemoveApplication(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveApplication", reflect.TypeOf((*MockApplicationRepositoryPort)(nil).RemoveApplication), arg0)
}

// Save mocks base method.
func (m *MockApplicationRepositoryPort) Save(arg0 entities.Application) (entities.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(entities.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockApplicationRepositoryPortMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockApplicationRepositoryPort)(nil).Save), arg0)
}

// UpdateApplication mocks base method.
func (m *MockApplicationRepositoryPort) UpdateApplication(arg0 uint32, arg1, arg2 string) (entities.Application, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateApplication", arg0, arg1, arg2)
	ret0, _ := ret[0].(entities.Application)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateApplication indicates an expected call of UpdateApplication.
func (mr *MockApplicationRepositoryPortMockRecorder) UpdateApplication(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateApplication", reflect.TypeOf((*MockApplicationRepositoryPort)(nil).UpdateApplication), arg0, arg1, arg2)
}
